/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.Block');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.Transaction');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Block.repeatedFields_, null);
};
goog.inherits(proto.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Block.displayName = 'proto.Block';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Block.repeatedFields_ = [14,15];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Block.prototype.toObject = function(opt_includeInstance) {
  return proto.Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Block.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    numberoftransactions: jspb.Message.getFieldWithDefault(msg, 3, 0),
    totalamount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    totalfee: jspb.Message.getFieldWithDefault(msg, 5, 0),
    blockreward: jspb.Message.getFieldWithDefault(msg, 6, 0),
    payloadlength: jspb.Message.getFieldWithDefault(msg, 7, 0),
    version: jspb.Message.getFieldWithDefault(msg, 8, 0),
    basetarget: jspb.Message.getFieldWithDefault(msg, 9, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 10, 0),
    generationsignature: msg.getGenerationsignature_asB64(),
    blocksignature: msg.getBlocksignature_asB64(),
    payloadhash: msg.getPayloadhash_asB64(),
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    proto.Transaction.toObject, includeInstance),
    transactionidsList: jspb.Message.getRepeatedField(msg, 15),
    generatorpublickey: msg.getGeneratorpublickey_asB64(),
    nonce: jspb.Message.getFieldWithDefault(msg, 17, 0),
    scoop: jspb.Message.getFieldWithDefault(msg, 18, 0),
    previousblock: jspb.Message.getFieldWithDefault(msg, 19, 0),
    nextblock: jspb.Message.getFieldWithDefault(msg, 20, 0),
    previousblockhash: msg.getPreviousblockhash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Block}
 */
proto.Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Block;
  return proto.Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Block}
 */
proto.Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumberoftransactions(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalamount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalfee(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockreward(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPayloadlength(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBasetarget(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimestamp(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGenerationsignature(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlocksignature(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayloadhash(value);
      break;
    case 14:
      var value = new proto.Transaction;
      reader.readMessage(value,proto.Transaction.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    case 15:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
      msg.setTransactionidsList(value);
      break;
    case 16:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGeneratorpublickey(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScoop(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPreviousblock(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNextblock(value);
      break;
    case 21:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPreviousblockhash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getNumberoftransactions();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getTotalamount();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getTotalfee();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getBlockreward();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getPayloadlength();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getBasetarget();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getGenerationsignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = message.getBlocksignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
  f = message.getPayloadhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = message.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.Transaction.serializeBinaryToWriter
    );
  }
  f = message.getTransactionidsList();
  if (f.length > 0) {
    writer.writePackedUint64(
      15,
      f
    );
  }
  f = message.getGeneratorpublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      16,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      17,
      f
    );
  }
  f = message.getScoop();
  if (f !== 0) {
    writer.writeUint32(
      18,
      f
    );
  }
  f = message.getPreviousblock();
  if (f !== 0) {
    writer.writeUint64(
      19,
      f
    );
  }
  f = message.getNextblock();
  if (f !== 0) {
    writer.writeUint64(
      20,
      f
    );
  }
  f = message.getPreviousblockhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      21,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.Block.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Block.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 height = 2;
 * @return {number}
 */
proto.Block.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Block.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 numberOfTransactions = 3;
 * @return {number}
 */
proto.Block.prototype.getNumberoftransactions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Block.prototype.setNumberoftransactions = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 totalAmount = 4;
 * @return {number}
 */
proto.Block.prototype.getTotalamount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.Block.prototype.setTotalamount = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 totalFee = 5;
 * @return {number}
 */
proto.Block.prototype.getTotalfee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.Block.prototype.setTotalfee = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 blockReward = 6;
 * @return {number}
 */
proto.Block.prototype.getBlockreward = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.Block.prototype.setBlockreward = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 payloadLength = 7;
 * @return {number}
 */
proto.Block.prototype.getPayloadlength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.Block.prototype.setPayloadlength = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 version = 8;
 * @return {number}
 */
proto.Block.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.Block.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint64 baseTarget = 9;
 * @return {number}
 */
proto.Block.prototype.getBasetarget = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.Block.prototype.setBasetarget = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint32 timestamp = 10;
 * @return {number}
 */
proto.Block.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.Block.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional bytes generationSignature = 11;
 * @return {string}
 */
proto.Block.prototype.getGenerationsignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes generationSignature = 11;
 * This is a type-conversion wrapper around `getGenerationsignature()`
 * @return {string}
 */
proto.Block.prototype.getGenerationsignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGenerationsignature()));
};


/**
 * optional bytes generationSignature = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGenerationsignature()`
 * @return {!Uint8Array}
 */
proto.Block.prototype.getGenerationsignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGenerationsignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.Block.prototype.setGenerationsignature = function(value) {
  jspb.Message.setProto3BytesField(this, 11, value);
};


/**
 * optional bytes blockSignature = 12;
 * @return {string}
 */
proto.Block.prototype.getBlocksignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes blockSignature = 12;
 * This is a type-conversion wrapper around `getBlocksignature()`
 * @return {string}
 */
proto.Block.prototype.getBlocksignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlocksignature()));
};


/**
 * optional bytes blockSignature = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlocksignature()`
 * @return {!Uint8Array}
 */
proto.Block.prototype.getBlocksignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlocksignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.Block.prototype.setBlocksignature = function(value) {
  jspb.Message.setProto3BytesField(this, 12, value);
};


/**
 * optional bytes payloadHash = 13;
 * @return {string}
 */
proto.Block.prototype.getPayloadhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes payloadHash = 13;
 * This is a type-conversion wrapper around `getPayloadhash()`
 * @return {string}
 */
proto.Block.prototype.getPayloadhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayloadhash()));
};


/**
 * optional bytes payloadHash = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayloadhash()`
 * @return {!Uint8Array}
 */
proto.Block.prototype.getPayloadhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayloadhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.Block.prototype.setPayloadhash = function(value) {
  jspb.Message.setProto3BytesField(this, 13, value);
};


/**
 * repeated Transaction transactions = 14;
 * @return {!Array<!proto.Transaction>}
 */
proto.Block.prototype.getTransactionsList = function() {
  return /** @type{!Array<!proto.Transaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Transaction, 14));
};


/** @param {!Array<!proto.Transaction>} value */
proto.Block.prototype.setTransactionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.Transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Transaction}
 */
proto.Block.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.Transaction, opt_index);
};


proto.Block.prototype.clearTransactionsList = function() {
  this.setTransactionsList([]);
};


/**
 * repeated uint64 transactionIds = 15;
 * @return {!Array<number>}
 */
proto.Block.prototype.getTransactionidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 15));
};


/** @param {!Array<number>} value */
proto.Block.prototype.setTransactionidsList = function(value) {
  jspb.Message.setField(this, 15, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.Block.prototype.addTransactionids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 15, value, opt_index);
};


proto.Block.prototype.clearTransactionidsList = function() {
  this.setTransactionidsList([]);
};


/**
 * optional bytes generatorPublicKey = 16;
 * @return {string}
 */
proto.Block.prototype.getGeneratorpublickey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * optional bytes generatorPublicKey = 16;
 * This is a type-conversion wrapper around `getGeneratorpublickey()`
 * @return {string}
 */
proto.Block.prototype.getGeneratorpublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGeneratorpublickey()));
};


/**
 * optional bytes generatorPublicKey = 16;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGeneratorpublickey()`
 * @return {!Uint8Array}
 */
proto.Block.prototype.getGeneratorpublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGeneratorpublickey()));
};


/** @param {!(string|Uint8Array)} value */
proto.Block.prototype.setGeneratorpublickey = function(value) {
  jspb.Message.setProto3BytesField(this, 16, value);
};


/**
 * optional uint64 nonce = 17;
 * @return {number}
 */
proto.Block.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.Block.prototype.setNonce = function(value) {
  jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional uint32 scoop = 18;
 * @return {number}
 */
proto.Block.prototype.getScoop = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.Block.prototype.setScoop = function(value) {
  jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional uint64 previousBlock = 19;
 * @return {number}
 */
proto.Block.prototype.getPreviousblock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {number} value */
proto.Block.prototype.setPreviousblock = function(value) {
  jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional uint64 nextBlock = 20;
 * @return {number}
 */
proto.Block.prototype.getNextblock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/** @param {number} value */
proto.Block.prototype.setNextblock = function(value) {
  jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional bytes previousBlockHash = 21;
 * @return {string}
 */
proto.Block.prototype.getPreviousblockhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/**
 * optional bytes previousBlockHash = 21;
 * This is a type-conversion wrapper around `getPreviousblockhash()`
 * @return {string}
 */
proto.Block.prototype.getPreviousblockhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPreviousblockhash()));
};


/**
 * optional bytes previousBlockHash = 21;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPreviousblockhash()`
 * @return {!Uint8Array}
 */
proto.Block.prototype.getPreviousblockhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPreviousblockhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.Block.prototype.setPreviousblockhash = function(value) {
  jspb.Message.setProto3BytesField(this, 21, value);
};


